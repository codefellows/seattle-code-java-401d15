
/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package demo;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;

import java.io.*;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;

public class App {
    static Gson gson = null;
    public String getGreeting() {
        return "Hello World!";
    }

    public static void main(String[] args) throws IOException {
        HttpURLConnection con = urlConnector();
        Pokemon pokemon = UrlReaderParser(con);
        pokemonFileWriter(pokemon);

        // GENERIC NODE PRACTICE
            Node<Integer> newNode = new Node<>(3);
            Node<Pokemon> newPokeNode = new Node<>(pokemon);
        // END


    }
    // Possible inputs? String = url
        public static HttpURLConnection urlConnector() throws MalformedURLException, IOException {
        // 1. Make a URL to talk to pokeAPI
            URL url = new URL("https://pokeapi.co/api/v2/pokemon/ditto");
        // 2. Make a HTTPURLConnetion
            HttpURLConnection connection = (HttpURLConnection) url.openConnection();
        // 3. specify a method for request GET
            connection.setRequestMethod("GET");
            return connection;
        }

        public static Pokemon UrlReaderParser(HttpURLConnection connection) throws IOException {
            gson = new GsonBuilder().setPrettyPrinting().create();
            // 4. get inputstream from connection -> InputStreamReader
            InputStreamReader pokeInputStreamReader = new InputStreamReader(connection.getInputStream());
            // 5. Read the stream -> BufferedReader
            String pokeData = null;
            try (BufferedReader reader = new BufferedReader(pokeInputStreamReader)) {
                // 6. readline() -> a line of data -> iterate??
                pokeData = reader.readLine();
                System.out.println("POKE DATA" + pokeData);
            } catch (IOException ioException) {
                ioException.printStackTrace();
            }
            // 7. Parse data into a class -> Make a Pokemon class
            Pokemon ditto = gson.fromJson(pokeData, Pokemon.class);
            return ditto;

        }

        public static void pokemonFileWriter(Pokemon pokemon) throws IOException {
            // STRECH GOAL
            // 8. write to a file -> FileWriter
            File dittoFile = new File("./ditto.json");
            try(FileWriter pokeFileWriter = new FileWriter(dittoFile)){
                gson.toJson(pokemon, pokeFileWriter);
            } catch (IOException ioe) {
                ioe.printStackTrace();
            }

        }


}
